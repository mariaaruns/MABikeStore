@using System.Net.Http.Json
@using System.Threading
@using BikeStore.Domain.DTO
@using BikeStore.Domain.DTO.Request.BrandRequest
@using BikeStore.Domain.DTO.Response.BrandResponse
@using BikeStore.UI.Contracts.Interface


    <MudTable ServerData="ServerReload" Dense="true" Loading="@(!isOkResponse)" Hover="true" @ref="table">
        <ToolBarContent>
            <MudSpacer />
            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortLabel="nr_field" T="GetBrandResponse">Id</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="sign_field" T="GetBrandResponse">Name</MudTableSortLabel></MudTh>
            <MudTh>Action</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.BrandId</MudTd>
            <MudTd DataLabel="Name">@context.BrandName</MudTd>
            <MudTd DataLabel="Action">
                    <MudFab StartIcon="@Icons.Material.Filled.Edit" Color="Color.Secondary" onclick="@(()=>Edit(context.BrandId))" Size="Size.Small" />
                    <MudFab StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" onclick="@(()=>Delete(context.BrandId))" Size="Size.Small" />
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
@code {
    [Parameter]
    public string Status { get; set; }

    public bool isOkResponse { get; set; } = false;
    private string searchString = null;

    //private IEnumerable<GetBrandResponse> pagedData;
    private MudTable<GetBrandResponse> table;

    private async Task<TableData<GetBrandResponse>> ServerReload(TableState state, CancellationToken token)
    {
        // Forward the provided token to methods which support it
        var BrandRequest = new GetBrandRequest
        {
                BrandFilter=searchString,
                PageNumber = state.Page == 0 ? 1: state.Page,
                PageSize = state.PageSize,
                IsActive = Status=="Active"

        };
        var data = await GetAllBrand(BrandRequest);
        // Simulate a long-running operation
        await Task.Delay(300, token);
        // Get the total count
        var totalItems = data.TotalNoOfRecords;
        // Get the paged data

        // Return the data
        return new TableData<GetBrandResponse>() { TotalItems = totalItems, Items = data.Items };
    }

    [Inject]
    public IBrandApi _brandApi { get; set; }

    // protected override async Task OnInitializedAsync()
    // {
    //     //await table.ReloadServerData();

    // }
    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    protected async Task<PaginationModel<GetBrandResponse>> GetAllBrand(GetBrandRequest request) 
    {
        isOkResponse = false;

        var result= await _brandApi.GetAllBrand(request);

        if (result.StatusCode == System.Net.HttpStatusCode.OK)
        {
            isOkResponse = true;
            return result.Data;
        }
        else 
        { 
            isOkResponse = false;
            return null;
        }
    }


    protected void  Edit(int id) { 
    
    }
    
    protected void Delete(int id)
    {

    }

}