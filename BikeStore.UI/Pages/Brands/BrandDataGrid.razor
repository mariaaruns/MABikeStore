@using System.Net.Http.Json
@using System.Threading
@using BikeStore.Domain.DTO
@using BikeStore.Domain.DTO.Request.BrandRequest
@using BikeStore.Domain.DTO.Response.BrandResponse
@using BikeStore.UI.Components
@using BikeStore.UI.Contracts.Interface
@using BikeStore.UI.ViewModel
@inject IDialogService DialogService



<MudTable FixedHeader="true" Height="300px" FixedFooter="true" ServerData="ServerReload" Dense="true" Loading="@(!BrandVM.isOkResponse)" Hover="true" @ref="table">
    <ToolBarContent>
        <MudButton Color="Color.Primary" onclick="@(()=>OpenEditDialog(0,"",""))" ButtonType="ButtonType.Button" IconColor="Color.Tertiary" StartIcon="@Icons.Material.Filled.Add">Add Brand</MudButton>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
        AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><b>Logo</b></MudTh>
        @*  <MudTh><MudTableSortLabel SortLabel="nr_field" T="GetBrandResponse"><b>Id</b></MudTableSortLabel></MudTh> *@
        <MudTh><MudTableSortLabel SortLabel="sign_field" T="GetBrandResponse"><b>Name</b></MudTableSortLabel></MudTh>
        <MudTh><b>Action</b></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Logo">
            <MudAvatar Size="Size.Large">
                <MudImage Src="@context.Logo"></MudImage>
            </MudAvatar>
        </MudTd>
        <MudTd DataLabel="Name">@context.BrandName</MudTd>
        <MudTd DataLabel="Action">
            <MudButtonGroup Color="Color.Transparent" Variant="Variant.Filled">
                @if (Status == "Active")
                {
                    <MudIconButton Color="Color.Secondary" onclick="@(()=>OpenEditDialog(context.BrandId,context.BrandName,context.Logo))" Icon="@Icons.Material.Filled.Edit"></MudIconButton>
                }
                <MudIconButton Color="Color.Error" onclick="@(()=>DeleteAlert(context.BrandId))" Icon="@(Status == "Active" ?Icons.Material.Filled.Delete :Icons.Material.Filled.RestoreFromTrash)"></MudIconButton>
            </MudButtonGroup>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
         <MudTablePager    /> 
        @* <MudPagination SelectedChanged="PageChanged" Variant="@Variant.Filled" Count=" BrandVM.data.TotalPages" Class="pa-4" /> *@
    </PagerContent>
</MudTable>

@code {
    private void PageChanged(int i)
    {
        table.NavigateTo(i - 1);
    }

    [Parameter]
    public string Status { get; set; }

    [Parameter]
    public EventCallback OnCountChange { get; set; }

    [Parameter]
    public BrandViewModel BrandVM { get; set; }

    protected override async Task OnInitializedAsync()
    {
        BrandVM.status = Status;
       await Task.Delay(600);

    }



    

    //private IEnumerable<GetBrandResponse> pagedData;
    private MudTable<GetBrandResponse> table;

    private async Task<TableData<GetBrandResponse>> ServerReload(TableState state, CancellationToken token)
    {

        int pagew = table.CurrentPage;
        var BrandRequest = new GetBrandRequest
            {
                BrandFilter = BrandVM.searchString,
                PageNumber = state.Page + 1,
                PageSize = state.PageSize,
                IsActive = Status == "Active"
            };

        BrandVM.data = await BrandVM.GetAllBrand(BrandRequest);

        await Task.Delay(300, token);

        var totalItems = BrandVM.data.TotalNoOfRecords;

        return new TableData<GetBrandResponse>() { TotalItems = totalItems, Items = BrandVM.data.Items };
    }

 

    private void OnSearch(string text)
    {
        BrandVM.searchString = text;
        table.ReloadServerData();
    }

  

    protected Task OpenEditDialog(int id, string brandName, string image)
    {
        
        BrandVM.BrandLogoPreview = image;
        BrandVM.BrandId = id;
        BrandVM.BrandName = brandName;

        var parameters = new DialogParameters<EditBrand>
        {
            { "BrandVM",BrandVM},
            {"OnUpdated",EventCallback.Factory.Create<bool>(this,ReloadTable) }
        };
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true };
        return DialogService.ShowAsync<EditBrand>("Edit brand", parameters, options);
    }

    protected Task DeleteAlert(int id)
    {
        var parameters = new DialogParameters<DeleteDialog>
        {
            { x => x.ContentText,  $"Do you really want to {(Status == "Active" ? "Inactive" : "Active")} these records?"},
            { x => x.ButtonText, $"{(Status == "Active" ? "Inactive" : "Restore")}"},
            { x => x.Color, Color.Error },
            { x => x.id, id },
            { "OnDelete", EventCallback.Factory.Create<int>(this, ConfirmDelete) }
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        return DialogService.ShowAsync<DeleteDialog>("Active/Inactive Confirmation", parameters, options);
    }

    private async Task ReloadTable(bool isSuccess)
    {
        if (isSuccess)
            await table.ReloadServerData();
    }


    private async Task ConfirmDelete(int id)
    {
        var isDeleted =await BrandVM.DeleteBrand(id);
        if (isDeleted)
        {
                StateHasChanged();
                await OnCountChange.InvokeAsync();   
        }
    }

   
}