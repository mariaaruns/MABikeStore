@using BikeStore.Domain.DTO.Request.BrandRequest
@using BikeStore.UI.AppConstant
@using BikeStore.UI.Contracts.Interface
@using System.Text.Json
@using System.Text
@using BikeStore.UI.ViewModel


<MudDialog   Class="width blur dialog-background" TitleClass="blur dialog-background-title" ContentClass="dialog-background-surface py-10" ActionsClass="dialog-background-surface">
    <DialogContent>
        <MudForm >
            <MudGrid  Justify="Justify.Center" >

                <MudItem Class="d-flex align-center justify-center mud-width-full py-4" xs="12">
                    @if (!string.IsNullOrEmpty(BrandVM.BrandLogoPreview))
                    {
                        <MudAvatar Size="Size.Large" Color="Color.Primary">
                            <MudImage Src="@BrandVM.BrandLogoPreview" />
                        </MudAvatar>

                    }
                    else
                    {
                        <MudAvatar Size="Size.Large" Color="Color.Primary">
                        </MudAvatar>

                    }
                </MudItem>

                <MudItem>
                    <InputFile OnChange="HandleFileSelected" />

                </MudItem>

                <MudItem xs="12" >
                    <MudTextField @bind-Value="BrandVM.BrandName" Label="Brand Name" Variant="Variant.Filled"></MudTextField>
                </MudItem>

            </MudGrid>
        </MudForm>

    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="SubmitAsync">Update</MudButton>
    </DialogActions>
</MudDialog>

<style>

    .mud-avatar.mud-avatar-large {
    width: 150px;
    height: 150px;
    font-size: 1.5rem;
    }
</style>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    [Parameter]
    public EventCallback<bool> OnUpdated { get; set; }

    // [Parameter]
    // public int BrandId { get; set; }
    // [Parameter]
    // public string BrandName { get; set; }
    // [Parameter]
    // public string BrandLogoPreview { get; set; }
    [Parameter]
    public BrandViewModel BrandVM { get; set; }
   
    // private async Task HandleFileSelected(InputFileChangeEventArgs e)
    // {
    //     ClearAttachments();
    //     BrandVM._files = e.File;
    //     BrandVM.ImageBytes = await BrandVM._files.ConvertToByteArrayAsync();
    //     BrandVM.base64String = Convert.ToBase64String(BrandVM.ImageBytes);
    //     BrandVM.BrandLogoPreview = $"data:{BrandVM._files.ContentType};base64,{ BrandVM.base64String}";

    // }
    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        await BrandVM.SetImageAsync(e.File); 
    }
    private void Cancel() => MudDialog.Cancel();

    

    public async Task SubmitAsync() 
    { 
        var isSuccessfullyUpsert = await BrandVM.SubmitAsync();
       
        if (OnUpdated.HasDelegate && isSuccessfullyUpsert)
        {
            await OnUpdated.InvokeAsync(isSuccessfullyUpsert);
            MudDialog.Close(DialogResult.Ok(true));
        }
    }


    // protected override async Task OnParametersSetAsync()
    // {
    //     if (BrandId != 0)
    //     {
    //         //   await GetBrandDetails(BrandId);
    //         await Task.CompletedTask;
    //     }
    //     StateHasChanged();
    // }

    // protected async Task GetBrandDetails(int id)
    // {
    //     var brand = await _brandApi.GetBrandByIdAsync(id);
    //     if (brand.StatusCode == System.Net.HttpStatusCode.OK && brand.Data != null)
    //     {
    //         BrandName = brand.Data.BrandName;
    //         BrandLogoPreview = brand.Data.Logo;
    //     }
    // }

}
    