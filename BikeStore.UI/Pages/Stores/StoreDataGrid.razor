@using System.Net.Http.Json
@using System.Threading
@using BikeStore.Domain.DTO
@using BikeStore.Domain.DTO.Request.StoreRequest
@using BikeStore.Domain.DTO.Response.StoreResponse
@using BikeStore.UI.Components
@using BikeStore.UI.Contracts.Interface
@inject IDialogService DialogService

<MudTable FixedHeader="true" Height="300px" FixedFooter="true" ServerData="ServerReload" Dense="true" Loading="@(!isOkResponse)" Hover="true" @ref="table">
    <ToolBarContent>
        <MudButton Color="Color.Primary" onclick="@(()=>OpenEditDialog(0))" ButtonType="ButtonType.Button" IconColor="Color.Tertiary" StartIcon="@Icons.Material.Filled.Add">Add Store</MudButton>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="sign_field" T="GetStoreCountResponse"><b>Store Name</b></MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="sign_field" T="GetStoreCountResponse"><b>Email Id</b></MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="sign_field" T="GetStoreCountResponse"><b>Phone</b></MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="sign_field" T="GetStoreCountResponse"><b>Address</b></MudTableSortLabel></MudTh>
        <MudTh><b>Action</b></MudTh>
    </HeaderContent>
    <RowTemplate>

        <MudTd DataLabel="Name">@context.StoreName</MudTd>
        <MudTd DataLabel="Name">@context.Email</MudTd>
        <MudTd DataLabel="Name">@context.Phone</MudTd>
        <MudTd DataLabel="Name">@context.Address</MudTd>
        <MudTd DataLabel="Action">
            <MudButtonGroup Color="Color.Transparent" Variant="Variant.Filled">
                @if (Status == "Active")
                {
                    <MudIconButton Color="Color.Secondary" onclick="@(()=>OpenEditDialog(context.StoreId))" Icon="@Icons.Material.Filled.Edit"></MudIconButton>
                }
                <MudIconButton Color="Color.Error" onclick="@(()=>DeleteAlert(context.StoreId))" Icon="@(Status == "Active" ?Icons.Material.Filled.Delete :Icons.Material.Filled.RestoreFromTrash)"></MudIconButton>
            </MudButtonGroup>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>

@code {
    [Parameter]
    public string Status { get; set; }
    [Parameter]
    public EventCallback OnCountChange { get; set; }
    public bool isOkResponse { get; set; } = false;
    private string searchString = null;
    public PaginationModel<GetStoreResponse> data;

    //private IEnumerable<GetBrandResponse> pagedData;
    private MudTable<GetStoreResponse> table;

    private async Task<TableData<GetStoreResponse>> ServerReload(TableState state, CancellationToken token)
    {
        int pagew = table.CurrentPage;
        var storeRequest = new GetStoreRequest
            {
                StoreNameFilter = searchString,
                PageNumber = state.Page + 1,
                PageSize = state.PageSize,
                IsActive = Status == "Active"
            };

        data = await GetAllStore(storeRequest);

        await Task.Delay(300, token);

        var totalItems = data.TotalNoOfRecords;

        return new TableData<GetStoreResponse>() { TotalItems = totalItems, Items = data.Items };
    }

    [Inject]
    public IStoreApi _storeApi { get; set; }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    protected async Task<PaginationModel<GetStoreResponse>> GetAllStore(GetStoreRequest request)
    {
        isOkResponse = false;

        var result = await _storeApi.GetAllStoreAsync(request);

        if (result.StatusCode == System.Net.HttpStatusCode.OK)
        {
            isOkResponse = true;
            return result.Data;
        }
        else
        {
            isOkResponse = false;
            return null;
        }
    }




    protected Task OpenEditDialog(int id)
    {
        var parameters = new DialogParameters<EditStore>
        {
            {"StoreId",id},
            {"OnUpdated",EventCallback.Factory.Create<bool>(this,ReloadTable) }
        };
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true };
        return DialogService.ShowAsync<EditStore>("Edit Category", parameters, options);
    }

    protected Task DeleteAlert(int id)
    {
        var parameters = new DialogParameters<DeleteDialog>
        {
            { x => x.ContentText,  $"Do you really want to {(Status == "Active" ? "Inactive" : "Active")} these records?"},
            { x => x.ButtonText, $"{(Status == "Active" ? "Inactive" : "Restore")}"},
            { x => x.Color, Color.Error },
            { x => x.id, id },
            { "OnDelete", EventCallback.Factory.Create<int>(this, ConfirmDelete) }
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        return DialogService.ShowAsync<DeleteDialog>("Active/Inactive Confirmation", parameters, options);
    }

    private async Task ReloadTable(bool isSuccess)
    {
        if (isSuccess)
            await table.ReloadServerData();
    }

    private async Task ConfirmDelete(int id)
    {
        // if (id != 0)
        // {

        //     var result = await _categoryApi.DeleteCategoryAsync(id);
        //     if (result.Data)
        //     {
        //         var RemoveData = data.Items.FirstOrDefault(x => x.CategoryId == id);
        //         data.Items.Remove(RemoveData);
        //         StateHasChanged();
        //         await OnCountChange.InvokeAsync();
        //     }
        // }

    }
}